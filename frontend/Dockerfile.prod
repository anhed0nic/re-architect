# Build stage
FROM node:18-alpine AS builder

# Set working directory
WORKDIR /app

# Add package configuration files
COPY package.json package-lock.json ./

# Install dependencies
RUN npm ci

# Copy application source
COPY . ./

# Set environment variables for build
ARG API_URL=/api
ENV REACT_APP_API_URL=${API_URL}
ARG NODE_ENV=production
ENV NODE_ENV=${NODE_ENV}

# Build application
RUN npm run build

# Production stage
FROM nginx:stable-alpine AS production

# Add security headers and gzip configuration
RUN rm -rf /etc/nginx/conf.d/*
COPY nginx.conf /etc/nginx/conf.d/default.conf

# Copy built files
COPY --from=builder /app/build /usr/share/nginx/html

# Add security hardening for nginx
RUN sed -i 's/user  nginx;/user  nginx;\n\nserver_tokens off;/' /etc/nginx/nginx.conf && \
    echo 'gzip on;' >> /etc/nginx/conf.d/default.conf && \
    echo 'gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;' >> /etc/nginx/conf.d/default.conf

# Add security headers to nginx config
RUN echo 'add_header X-Content-Type-Options nosniff;' >> /etc/nginx/conf.d/default.conf && \
    echo 'add_header X-Frame-Options DENY;' >> /etc/nginx/conf.d/default.conf && \
    echo 'add_header X-XSS-Protection "1; mode=block";' >> /etc/nginx/conf.d/default.conf && \
    echo 'add_header Content-Security-Policy "default-src '\''self'\''; script-src '\''self'\'' '\''unsafe-inline'\'' '\''unsafe-eval'\''; style-src '\''self'\'' '\''unsafe-inline'\''; img-src '\''self'\'' data:; font-src '\''self'\'' data:; connect-src '\''self'\'' https://api.openai.com";' >> /etc/nginx/conf.d/default.conf

# Expose port
EXPOSE 80

# Health check
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:80/ || exit 1

# Container metadata
LABEL maintainer="RE-Architect Team" \
      version="1.0" \
      description="RE-Architect Frontend"

# Start nginx
CMD ["nginx", "-g", "daemon off;"]